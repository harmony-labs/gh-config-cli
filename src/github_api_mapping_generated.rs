// AUTO-GENERATED FILE. DO NOT EDIT BY HAND.
// Please run `make generate-api-mappings` to regenerate.
// This generator prioritizes PATCH /repos/{owner}/{repo} for repo settings.
// WARNING: Collisions for other keys might still use the *last processed* mapping.
use std::collections::HashMap;
use crate::api_mapping::ApiFieldMapping;
pub fn get_github_api_mapping() -> HashMap<&'static str, ApiFieldMapping> {
    let mut map = HashMap::new();
    map.insert("access_level", ApiFieldMapping { resource_type: "repo", config_key: "access_level", endpoint: "/repos/{owner}/{repo}/actions/permissions/access", method: "PUT", json_path: "access_level" });
    map.insert("access_token", ApiFieldMapping { resource_type: "other", config_key: "access_token", endpoint: "/applications/{client_id}/token/scoped", method: "POST", json_path: "access_token" });
    map.insert("account_urls", ApiFieldMapping { resource_type: "user", config_key: "account_urls", endpoint: "/user/social_accounts", method: "POST", json_path: "account_urls" });
    map.insert("action", ApiFieldMapping { resource_type: "org", config_key: "action", endpoint: "/orgs/{org}/personal-access-tokens/{pat_id}", method: "POST", json_path: "action" });
    map.insert("actions", ApiFieldMapping { resource_type: "repo", config_key: "actions", endpoint: "/repos/{owner}/{repo}/check-runs/{check_run_id}", method: "PATCH", json_path: "actions" });
    map.insert("active", ApiFieldMapping { resource_type: "repo", config_key: "active", endpoint: "/repos/{owner}/{repo}/hooks/{hook_id}", method: "PATCH", json_path: "active" });
    map.insert("add_events", ApiFieldMapping { resource_type: "repo", config_key: "add_events", endpoint: "/repos/{owner}/{repo}/hooks/{hook_id}", method: "PATCH", json_path: "add_events" });
    map.insert("advanced_security", ApiFieldMapping { resource_type: "org", config_key: "advanced_security", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "advanced_security" });
    map.insert("advanced_security_enabled_for_new_repositories", ApiFieldMapping { resource_type: "org", config_key: "advanced_security_enabled_for_new_repositories", endpoint: "/orgs/{org}", method: "PATCH", json_path: "advanced_security_enabled_for_new_repositories" });
    map.insert("after_id", ApiFieldMapping { resource_type: "repo", config_key: "after_id", endpoint: "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority", method: "PATCH", json_path: "after_id" });
    map.insert("allow_auto_merge", ApiFieldMapping { resource_type: "repo", config_key: "allow_auto_merge", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "allow_auto_merge" });
    map.insert("allow_deletions", ApiFieldMapping { resource_type: "repo", config_key: "allow_deletions", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection", method: "PUT", json_path: "allow_deletions" });
    map.insert("allow_force_pushes", ApiFieldMapping { resource_type: "repo", config_key: "allow_force_pushes", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection", method: "PUT", json_path: "allow_force_pushes" });
    map.insert("allow_fork_syncing", ApiFieldMapping { resource_type: "repo", config_key: "allow_fork_syncing", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection", method: "PUT", json_path: "allow_fork_syncing" });
    map.insert("allow_forking", ApiFieldMapping { resource_type: "repo", config_key: "allow_forking", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "allow_forking" });
    map.insert("allow_merge_commit", ApiFieldMapping { resource_type: "repo", config_key: "allow_merge_commit", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "allow_merge_commit" });
    map.insert("allow_rebase_merge", ApiFieldMapping { resource_type: "repo", config_key: "allow_rebase_merge", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "allow_rebase_merge" });
    map.insert("allow_squash_merge", ApiFieldMapping { resource_type: "repo", config_key: "allow_squash_merge", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "allow_squash_merge" });
    map.insert("allow_update_branch", ApiFieldMapping { resource_type: "repo", config_key: "allow_update_branch", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "allow_update_branch" });
    map.insert("allowed_actions", ApiFieldMapping { resource_type: "repo", config_key: "allowed_actions", endpoint: "/repos/{owner}/{repo}/actions/permissions", method: "PUT", json_path: "allowed_actions" });
    map.insert("allowed_values", ApiFieldMapping { resource_type: "org", config_key: "allowed_values", endpoint: "/orgs/{org}/properties/schema/{custom_property_name}", method: "PUT", json_path: "allowed_values" });
    map.insert("allows_public_repositories", ApiFieldMapping { resource_type: "org", config_key: "allows_public_repositories", endpoint: "/orgs/{org}/actions/runner-groups/{runner_group_id}", method: "PATCH", json_path: "allows_public_repositories" });
    map.insert("apps", ApiFieldMapping { resource_type: "repo", config_key: "apps", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", method: "PUT", json_path: "apps" });
    map.insert("archived", ApiFieldMapping { resource_type: "repo", config_key: "archived", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "archived" });
    map.insert("armored_public_key", ApiFieldMapping { resource_type: "user", config_key: "armored_public_key", endpoint: "/user/gpg_keys", method: "POST", json_path: "armored_public_key" });
    map.insert("artifact_id", ApiFieldMapping { resource_type: "repo", config_key: "artifact_id", endpoint: "/repos/{owner}/{repo}/pages/deployments", method: "POST", json_path: "artifact_id" });
    map.insert("artifact_url", ApiFieldMapping { resource_type: "repo", config_key: "artifact_url", endpoint: "/repos/{owner}/{repo}/pages/deployments", method: "POST", json_path: "artifact_url" });
    map.insert("assignee", ApiFieldMapping { resource_type: "repo", config_key: "assignee", endpoint: "/repos/{owner}/{repo}/issues/{issue_number}", method: "PATCH", json_path: "assignee" });
    map.insert("assignees", ApiFieldMapping { resource_type: "repo", config_key: "assignees", endpoint: "/repos/{owner}/{repo}/issues/{issue_number}", method: "PATCH", json_path: "assignees" });
    map.insert("async", ApiFieldMapping { resource_type: "org", config_key: "async", endpoint: "/orgs/{org}/outside_collaborators/{username}", method: "PUT", json_path: "async" });
    map.insert("author", ApiFieldMapping { resource_type: "repo", config_key: "author", endpoint: "/repos/{owner}/{repo}/git/commits", method: "POST", json_path: "author" });
    map.insert("auto_inactive", ApiFieldMapping { resource_type: "repo", config_key: "auto_inactive", endpoint: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses", method: "POST", json_path: "auto_inactive" });
    map.insert("auto_init", ApiFieldMapping { resource_type: "repo_create_user", config_key: "auto_init", endpoint: "/user/repos", method: "POST", json_path: "auto_init" });
    map.insert("auto_merge", ApiFieldMapping { resource_type: "repo", config_key: "auto_merge", endpoint: "/repos/{owner}/{repo}/deployments", method: "POST", json_path: "auto_merge" });
    map.insert("auto_trigger_checks", ApiFieldMapping { resource_type: "repo", config_key: "auto_trigger_checks", endpoint: "/repos/{owner}/{repo}/check-suites/preferences", method: "PATCH", json_path: "auto_trigger_checks" });
    map.insert("base", ApiFieldMapping { resource_type: "repo", config_key: "base", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}", method: "PATCH", json_path: "base" });
    map.insert("base_tree", ApiFieldMapping { resource_type: "repo", config_key: "base_tree", endpoint: "/repos/{owner}/{repo}/git/trees", method: "POST", json_path: "base_tree" });
    map.insert("before_id", ApiFieldMapping { resource_type: "repo", config_key: "before_id", endpoint: "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority", method: "PATCH", json_path: "before_id" });
    map.insert("billing_email", ApiFieldMapping { resource_type: "org", config_key: "billing_email", endpoint: "/orgs/{org}", method: "PATCH", json_path: "billing_email" });
    map.insert("bio", ApiFieldMapping { resource_type: "user", config_key: "bio", endpoint: "/user", method: "PATCH", json_path: "bio" });
    map.insert("block_creations", ApiFieldMapping { resource_type: "repo", config_key: "block_creations", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection", method: "PUT", json_path: "block_creations" });
    map.insert("blog", ApiFieldMapping { resource_type: "user", config_key: "blog", endpoint: "/user", method: "PATCH", json_path: "blog" });
    map.insert("body", ApiFieldMapping { resource_type: "repo", config_key: "body", endpoint: "/repos/{owner}/{repo}/comments/{comment_id}", method: "PATCH", json_path: "body" });
    map.insert("branch", ApiFieldMapping { resource_type: "repo", config_key: "branch", endpoint: "/repos/{owner}/{repo}/merge-upstream", method: "POST", json_path: "branch" });
    map.insert("build_type", ApiFieldMapping { resource_type: "repo", config_key: "build_type", endpoint: "/repos/{owner}/{repo}/pages", method: "PUT", json_path: "build_type" });
    map.insert("bundle", ApiFieldMapping { resource_type: "repo", config_key: "bundle", endpoint: "/repos/{owner}/{repo}/attestations", method: "POST", json_path: "bundle" });
    map.insert("bypass_actors", ApiFieldMapping { resource_type: "repo", config_key: "bypass_actors", endpoint: "/repos/{owner}/{repo}/rulesets/{ruleset_id}", method: "PUT", json_path: "bypass_actors" });
    map.insert("bypass_pull_request_allowances", ApiFieldMapping { resource_type: "repo", config_key: "bypass_pull_request_allowances", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", method: "PATCH", json_path: "bypass_pull_request_allowances" });
    map.insert("can_approve_pull_request_reviews", ApiFieldMapping { resource_type: "repo", config_key: "can_approve_pull_request_reviews", endpoint: "/repos/{owner}/{repo}/actions/permissions/workflow", method: "PUT", json_path: "can_approve_pull_request_reviews" });
    map.insert("checkout_uri", ApiFieldMapping { resource_type: "repo", config_key: "checkout_uri", endpoint: "/repos/{owner}/{repo}/code-scanning/sarifs", method: "POST", json_path: "checkout_uri" });
    map.insert("checks", ApiFieldMapping { resource_type: "repo", config_key: "checks", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", method: "PATCH", json_path: "checks" });
    map.insert("client_ip", ApiFieldMapping { resource_type: "repo", config_key: "client_ip", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces", method: "POST", json_path: "client_ip" });
    map.insert("client_payload", ApiFieldMapping { resource_type: "repo", config_key: "client_payload", endpoint: "/repos/{owner}/{repo}/dispatches", method: "POST", json_path: "client_payload" });
    map.insert("cname", ApiFieldMapping { resource_type: "repo", config_key: "cname", endpoint: "/repos/{owner}/{repo}/pages", method: "PUT", json_path: "cname" });
    map.insert("code_scanning_alerts", ApiFieldMapping { resource_type: "org", config_key: "code_scanning_alerts", endpoint: "/orgs/{org}/campaigns", method: "POST", json_path: "code_scanning_alerts" });
    map.insert("code_scanning_default_setup", ApiFieldMapping { resource_type: "org", config_key: "code_scanning_default_setup", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "code_scanning_default_setup" });
    map.insert("code_scanning_default_setup_options", ApiFieldMapping { resource_type: "org", config_key: "code_scanning_default_setup_options", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "code_scanning_default_setup_options" });
    map.insert("code_scanning_delegated_alert_dismissal", ApiFieldMapping { resource_type: "org", config_key: "code_scanning_delegated_alert_dismissal", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "code_scanning_delegated_alert_dismissal" });
    map.insert("collaborating_teams", ApiFieldMapping { resource_type: "repo", config_key: "collaborating_teams", endpoint: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}", method: "PATCH", json_path: "collaborating_teams" });
    map.insert("collaborating_users", ApiFieldMapping { resource_type: "repo", config_key: "collaborating_users", endpoint: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}", method: "PATCH", json_path: "collaborating_users" });
    map.insert("color", ApiFieldMapping { resource_type: "repo", config_key: "color", endpoint: "/repos/{owner}/{repo}/labels/{name}", method: "PATCH", json_path: "color" });
    map.insert("column_id", ApiFieldMapping { resource_type: "project", config_key: "column_id", endpoint: "/projects/columns/cards/{card_id}/moves", method: "POST", json_path: "column_id" });
    map.insert("comment", ApiFieldMapping { resource_type: "repo", config_key: "comment", endpoint: "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments", method: "POST", json_path: "comment" });
    map.insert("comments", ApiFieldMapping { resource_type: "repo", config_key: "comments", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews", method: "POST", json_path: "comments" });
    map.insert("commit_id", ApiFieldMapping { resource_type: "repo", config_key: "commit_id", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews", method: "POST", json_path: "commit_id" });
    map.insert("commit_message", ApiFieldMapping { resource_type: "repo", config_key: "commit_message", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/merge", method: "PUT", json_path: "commit_message" });
    map.insert("commit_sha", ApiFieldMapping { resource_type: "repo", config_key: "commit_sha", endpoint: "/repos/{owner}/{repo}/code-scanning/sarifs", method: "POST", json_path: "commit_sha" });
    map.insert("commit_title", ApiFieldMapping { resource_type: "repo", config_key: "commit_title", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/merge", method: "PUT", json_path: "commit_title" });
    map.insert("committer", ApiFieldMapping { resource_type: "repo", config_key: "committer", endpoint: "/repos/{owner}/{repo}/git/commits", method: "POST", json_path: "committer" });
    map.insert("company", ApiFieldMapping { resource_type: "user", config_key: "company", endpoint: "/user", method: "PATCH", json_path: "company" });
    map.insert("completed_at", ApiFieldMapping { resource_type: "repo", config_key: "completed_at", endpoint: "/repos/{owner}/{repo}/check-runs/{check_run_id}", method: "PATCH", json_path: "completed_at" });
    map.insert("compute_service", ApiFieldMapping { resource_type: "org", config_key: "compute_service", endpoint: "/orgs/{org}/settings/network-configurations/{network_configuration_id}", method: "PATCH", json_path: "compute_service" });
    map.insert("conclusion", ApiFieldMapping { resource_type: "repo", config_key: "conclusion", endpoint: "/repos/{owner}/{repo}/check-runs/{check_run_id}", method: "PATCH", json_path: "conclusion" });
    map.insert("conditions", ApiFieldMapping { resource_type: "repo", config_key: "conditions", endpoint: "/repos/{owner}/{repo}/rulesets/{ruleset_id}", method: "PUT", json_path: "conditions" });
    map.insert("config", ApiFieldMapping { resource_type: "repo", config_key: "config", endpoint: "/repos/{owner}/{repo}/hooks/{hook_id}", method: "PATCH", json_path: "config" });
    map.insert("configuration_file_path", ApiFieldMapping { resource_type: "repo", config_key: "configuration_file_path", endpoint: "/repos/{owner}/{repo}/releases/generate-notes", method: "POST", json_path: "configuration_file_path" });
    map.insert("contact_link", ApiFieldMapping { resource_type: "org", config_key: "contact_link", endpoint: "/orgs/{org}/campaigns/{campaign_number}", method: "PATCH", json_path: "contact_link" });
    map.insert("content", ApiFieldMapping { resource_type: "team", config_key: "content", endpoint: "/teams/{team_id}/discussions/{discussion_number}/reactions", method: "POST", json_path: "content" });
    map.insert("content_type", ApiFieldMapping { resource_type: "repo", config_key: "content_type", endpoint: "/repos/{owner}/{repo}/hooks/{hook_id}/config", method: "PATCH", json_path: "content_type" });
    map.insert("context", ApiFieldMapping { resource_type: "repo", config_key: "context", endpoint: "/repos/{owner}/{repo}/statuses/{sha}", method: "POST", json_path: "context" });
    map.insert("contexts", ApiFieldMapping { resource_type: "repo", config_key: "contexts", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", method: "PATCH", json_path: "contexts" });
    map.insert("create_request", ApiFieldMapping { resource_type: "repo", config_key: "create_request", endpoint: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", method: "PATCH", json_path: "create_request" });
    map.insert("credits", ApiFieldMapping { resource_type: "repo", config_key: "credits", endpoint: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}", method: "PATCH", json_path: "credits" });
    map.insert("custom_properties", ApiFieldMapping { resource_type: "org", config_key: "custom_properties", endpoint: "/orgs/{org}/repos", method: "POST", json_path: "custom_properties" });
    map.insert("cve_id", ApiFieldMapping { resource_type: "repo", config_key: "cve_id", endpoint: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}", method: "PATCH", json_path: "cve_id" });
    map.insert("cvss_vector_string", ApiFieldMapping { resource_type: "repo", config_key: "cvss_vector_string", endpoint: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}", method: "PATCH", json_path: "cvss_vector_string" });
    map.insert("cwe_ids", ApiFieldMapping { resource_type: "repo", config_key: "cwe_ids", endpoint: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}", method: "PATCH", json_path: "cwe_ids" });
    map.insert("default_branch", ApiFieldMapping { resource_type: "repo", config_key: "default_branch", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "default_branch" });
    map.insert("default_branch_only", ApiFieldMapping { resource_type: "repo", config_key: "default_branch_only", endpoint: "/repos/{owner}/{repo}/forks", method: "POST", json_path: "default_branch_only" });
    map.insert("default_for_new_repos", ApiFieldMapping { resource_type: "org", config_key: "default_for_new_repos", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}/defaults", method: "PUT", json_path: "default_for_new_repos" });
    map.insert("default_repository_permission", ApiFieldMapping { resource_type: "org", config_key: "default_repository_permission", endpoint: "/orgs/{org}", method: "PATCH", json_path: "default_repository_permission" });
    map.insert("default_value", ApiFieldMapping { resource_type: "org", config_key: "default_value", endpoint: "/orgs/{org}/properties/schema/{custom_property_name}", method: "PUT", json_path: "default_value" });
    map.insert("default_workflow_permissions", ApiFieldMapping { resource_type: "repo", config_key: "default_workflow_permissions", endpoint: "/repos/{owner}/{repo}/actions/permissions/workflow", method: "PUT", json_path: "default_workflow_permissions" });
    map.insert("delete_branch_on_merge", ApiFieldMapping { resource_type: "repo", config_key: "delete_branch_on_merge", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "delete_branch_on_merge" });
    map.insert("dependabot_alerts", ApiFieldMapping { resource_type: "org", config_key: "dependabot_alerts", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "dependabot_alerts" });
    map.insert("dependabot_alerts_enabled_for_new_repositories", ApiFieldMapping { resource_type: "org", config_key: "dependabot_alerts_enabled_for_new_repositories", endpoint: "/orgs/{org}", method: "PATCH", json_path: "dependabot_alerts_enabled_for_new_repositories" });
    map.insert("dependabot_security_updates", ApiFieldMapping { resource_type: "org", config_key: "dependabot_security_updates", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "dependabot_security_updates" });
    map.insert("dependabot_security_updates_enabled_for_new_repositories", ApiFieldMapping { resource_type: "org", config_key: "dependabot_security_updates_enabled_for_new_repositories", endpoint: "/orgs/{org}", method: "PATCH", json_path: "dependabot_security_updates_enabled_for_new_repositories" });
    map.insert("dependency_graph", ApiFieldMapping { resource_type: "org", config_key: "dependency_graph", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "dependency_graph" });
    map.insert("dependency_graph_autosubmit_action", ApiFieldMapping { resource_type: "org", config_key: "dependency_graph_autosubmit_action", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "dependency_graph_autosubmit_action" });
    map.insert("dependency_graph_autosubmit_action_options", ApiFieldMapping { resource_type: "org", config_key: "dependency_graph_autosubmit_action_options", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "dependency_graph_autosubmit_action_options" });
    map.insert("dependency_graph_enabled_for_new_repositories", ApiFieldMapping { resource_type: "org", config_key: "dependency_graph_enabled_for_new_repositories", endpoint: "/orgs/{org}", method: "PATCH", json_path: "dependency_graph_enabled_for_new_repositories" });
    map.insert("deploy_keys_enabled_for_repositories", ApiFieldMapping { resource_type: "org", config_key: "deploy_keys_enabled_for_repositories", endpoint: "/orgs/{org}", method: "PATCH", json_path: "deploy_keys_enabled_for_repositories" });
    map.insert("deployment_branch_policy", ApiFieldMapping { resource_type: "repo", config_key: "deployment_branch_policy", endpoint: "/repos/{owner}/{repo}/environments/{environment_name}", method: "PUT", json_path: "deployment_branch_policy" });
    map.insert("description", ApiFieldMapping { resource_type: "repo", config_key: "description", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "description" });
    map.insert("details_url", ApiFieldMapping { resource_type: "repo", config_key: "details_url", endpoint: "/repos/{owner}/{repo}/check-runs/{check_run_id}", method: "PATCH", json_path: "details_url" });
    map.insert("detector", ApiFieldMapping { resource_type: "repo", config_key: "detector", endpoint: "/repos/{owner}/{repo}/dependency-graph/snapshots", method: "POST", json_path: "detector" });
    map.insert("devcontainer_path", ApiFieldMapping { resource_type: "repo", config_key: "devcontainer_path", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces", method: "POST", json_path: "devcontainer_path" });
    map.insert("discussion_category_name", ApiFieldMapping { resource_type: "repo", config_key: "discussion_category_name", endpoint: "/repos/{owner}/{repo}/releases/{release_id}", method: "PATCH", json_path: "discussion_category_name" });
    map.insert("dismiss_stale_reviews", ApiFieldMapping { resource_type: "repo", config_key: "dismiss_stale_reviews", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", method: "PATCH", json_path: "dismiss_stale_reviews" });
    map.insert("dismissal_restrictions", ApiFieldMapping { resource_type: "repo", config_key: "dismissal_restrictions", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", method: "PATCH", json_path: "dismissal_restrictions" });
    map.insert("dismissed_comment", ApiFieldMapping { resource_type: "repo", config_key: "dismissed_comment", endpoint: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", method: "PATCH", json_path: "dismissed_comment" });
    map.insert("dismissed_reason", ApiFieldMapping { resource_type: "repo", config_key: "dismissed_reason", endpoint: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", method: "PATCH", json_path: "dismissed_reason" });
    map.insert("display_name", ApiFieldMapping { resource_type: "user", config_key: "display_name", endpoint: "/user/codespaces/{codespace_name}", method: "PATCH", json_path: "display_name" });
    map.insert("draft", ApiFieldMapping { resource_type: "repo", config_key: "draft", endpoint: "/repos/{owner}/{repo}/releases/{release_id}", method: "PATCH", json_path: "draft" });
    map.insert("due_on", ApiFieldMapping { resource_type: "repo", config_key: "due_on", endpoint: "/repos/{owner}/{repo}/milestones/{milestone_number}", method: "PATCH", json_path: "due_on" });
    map.insert("email", ApiFieldMapping { resource_type: "repo", config_key: "email", endpoint: "/repos/{owner}/{repo}/import/authors/{author_id}", method: "PATCH", json_path: "email" });
    map.insert("enable_debug_logging", ApiFieldMapping { resource_type: "repo", config_key: "enable_debug_logging", endpoint: "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs", method: "POST", json_path: "enable_debug_logging" });
    map.insert("enable_static_ip", ApiFieldMapping { resource_type: "org", config_key: "enable_static_ip", endpoint: "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}", method: "PATCH", json_path: "enable_static_ip" });
    map.insert("enabled", ApiFieldMapping { resource_type: "repo", config_key: "enabled", endpoint: "/repos/{owner}/{repo}/actions/permissions", method: "PUT", json_path: "enabled" });
    map.insert("enabled_repositories", ApiFieldMapping { resource_type: "org", config_key: "enabled_repositories", endpoint: "/orgs/{org}/actions/permissions", method: "PUT", json_path: "enabled_repositories" });
    map.insert("encoding", ApiFieldMapping { resource_type: "repo", config_key: "encoding", endpoint: "/repos/{owner}/{repo}/git/blobs", method: "POST", json_path: "encoding" });
    map.insert("encrypted_value", ApiFieldMapping { resource_type: "user", config_key: "encrypted_value", endpoint: "/user/codespaces/secrets/{secret_name}", method: "PUT", json_path: "encrypted_value" });
    map.insert("ends_at", ApiFieldMapping { resource_type: "org", config_key: "ends_at", endpoint: "/orgs/{org}/campaigns/{campaign_number}", method: "PATCH", json_path: "ends_at" });
    map.insert("enforce_admins", ApiFieldMapping { resource_type: "repo", config_key: "enforce_admins", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection", method: "PUT", json_path: "enforce_admins" });
    map.insert("enforcement", ApiFieldMapping { resource_type: "repo", config_key: "enforcement", endpoint: "/repos/{owner}/{repo}/rulesets/{ruleset_id}", method: "PUT", json_path: "enforcement" });
    map.insert("environment", ApiFieldMapping { resource_type: "repo", config_key: "environment", endpoint: "/repos/{owner}/{repo}/pages/deployments", method: "POST", json_path: "environment" });
    map.insert("environment_ids", ApiFieldMapping { resource_type: "repo", config_key: "environment_ids", endpoint: "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments", method: "POST", json_path: "environment_ids" });
    map.insert("environment_url", ApiFieldMapping { resource_type: "repo", config_key: "environment_url", endpoint: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses", method: "POST", json_path: "environment_url" });
    map.insert("event", ApiFieldMapping { resource_type: "repo", config_key: "event", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events", method: "POST", json_path: "event" });
    map.insert("event_type", ApiFieldMapping { resource_type: "repo", config_key: "event_type", endpoint: "/repos/{owner}/{repo}/dispatches", method: "POST", json_path: "event_type" });
    map.insert("events", ApiFieldMapping { resource_type: "repo", config_key: "events", endpoint: "/repos/{owner}/{repo}/hooks/{hook_id}", method: "PATCH", json_path: "events" });
    map.insert("exclude", ApiFieldMapping { resource_type: "user", config_key: "exclude", endpoint: "/user/migrations", method: "POST", json_path: "exclude" });
    map.insert("exclude_attachments", ApiFieldMapping { resource_type: "user", config_key: "exclude_attachments", endpoint: "/user/migrations", method: "POST", json_path: "exclude_attachments" });
    map.insert("exclude_git_data", ApiFieldMapping { resource_type: "user", config_key: "exclude_git_data", endpoint: "/user/migrations", method: "POST", json_path: "exclude_git_data" });
    map.insert("exclude_metadata", ApiFieldMapping { resource_type: "user", config_key: "exclude_metadata", endpoint: "/user/migrations", method: "POST", json_path: "exclude_metadata" });
    map.insert("exclude_owner_projects", ApiFieldMapping { resource_type: "user", config_key: "exclude_owner_projects", endpoint: "/user/migrations", method: "POST", json_path: "exclude_owner_projects" });
    map.insert("exclude_releases", ApiFieldMapping { resource_type: "user", config_key: "exclude_releases", endpoint: "/user/migrations", method: "POST", json_path: "exclude_releases" });
    map.insert("expected_head_sha", ApiFieldMapping { resource_type: "repo", config_key: "expected_head_sha", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch", method: "PUT", json_path: "expected_head_sha" });
    map.insert("expiry", ApiFieldMapping { resource_type: "user", config_key: "expiry", endpoint: "/user/interaction-limits", method: "PUT", json_path: "expiry" });
    map.insert("external_id", ApiFieldMapping { resource_type: "repo", config_key: "external_id", endpoint: "/repos/{owner}/{repo}/check-runs/{check_run_id}", method: "PATCH", json_path: "external_id" });
    map.insert("files", ApiFieldMapping { resource_type: "gist", config_key: "files", endpoint: "/gists/{gist_id}", method: "PATCH", json_path: "files" });
    map.insert("force", ApiFieldMapping { resource_type: "repo", config_key: "force", endpoint: "/repos/{owner}/{repo}/git/refs/{ref}", method: "PATCH", json_path: "force" });
    map.insert("generate_issues", ApiFieldMapping { resource_type: "org", config_key: "generate_issues", endpoint: "/orgs/{org}/campaigns", method: "POST", json_path: "generate_issues" });
    map.insert("generate_release_notes", ApiFieldMapping { resource_type: "repo", config_key: "generate_release_notes", endpoint: "/repos/{owner}/{repo}/releases", method: "POST", json_path: "generate_release_notes" });
    map.insert("geo", ApiFieldMapping { resource_type: "repo", config_key: "geo", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces", method: "POST", json_path: "geo" });
    map.insert("github_owned_allowed", ApiFieldMapping { resource_type: "repo", config_key: "github_owned_allowed", endpoint: "/repos/{owner}/{repo}/actions/permissions/selected-actions", method: "PUT", json_path: "github_owned_allowed" });
    map.insert("gitignore_template", ApiFieldMapping { resource_type: "repo_create_user", config_key: "gitignore_template", endpoint: "/user/repos", method: "POST", json_path: "gitignore_template" });
    map.insert("has_discussions", ApiFieldMapping { resource_type: "repo_create_user", config_key: "has_discussions", endpoint: "/user/repos", method: "POST", json_path: "has_discussions" });
    map.insert("has_downloads", ApiFieldMapping { resource_type: "repo_create_user", config_key: "has_downloads", endpoint: "/user/repos", method: "POST", json_path: "has_downloads" });
    map.insert("has_issues", ApiFieldMapping { resource_type: "repo", config_key: "has_issues", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "has_issues" });
    map.insert("has_organization_projects", ApiFieldMapping { resource_type: "org", config_key: "has_organization_projects", endpoint: "/orgs/{org}", method: "PATCH", json_path: "has_organization_projects" });
    map.insert("has_projects", ApiFieldMapping { resource_type: "repo", config_key: "has_projects", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "has_projects" });
    map.insert("has_repository_projects", ApiFieldMapping { resource_type: "org", config_key: "has_repository_projects", endpoint: "/orgs/{org}", method: "PATCH", json_path: "has_repository_projects" });
    map.insert("has_wiki", ApiFieldMapping { resource_type: "repo", config_key: "has_wiki", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "has_wiki" });
    map.insert("head", ApiFieldMapping { resource_type: "repo", config_key: "head", endpoint: "/repos/{owner}/{repo}/pulls", method: "POST", json_path: "head" });
    map.insert("head_repo", ApiFieldMapping { resource_type: "repo", config_key: "head_repo", endpoint: "/repos/{owner}/{repo}/pulls", method: "POST", json_path: "head_repo" });
    map.insert("head_sha", ApiFieldMapping { resource_type: "repo", config_key: "head_sha", endpoint: "/repos/{owner}/{repo}/check-suites", method: "POST", json_path: "head_sha" });
    map.insert("hireable", ApiFieldMapping { resource_type: "user", config_key: "hireable", endpoint: "/user", method: "PATCH", json_path: "hireable" });
    map.insert("homepage", ApiFieldMapping { resource_type: "repo", config_key: "homepage", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "homepage" });
    map.insert("https_enforced", ApiFieldMapping { resource_type: "repo", config_key: "https_enforced", endpoint: "/repos/{owner}/{repo}/pages", method: "PUT", json_path: "https_enforced" });
    map.insert("idle_timeout_minutes", ApiFieldMapping { resource_type: "repo", config_key: "idle_timeout_minutes", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces", method: "POST", json_path: "idle_timeout_minutes" });
    map.insert("ignored", ApiFieldMapping { resource_type: "repo", config_key: "ignored", endpoint: "/repos/{owner}/{repo}/subscription", method: "PUT", json_path: "ignored" });
    map.insert("image", ApiFieldMapping { resource_type: "org", config_key: "image", endpoint: "/orgs/{org}/actions/hosted-runners", method: "POST", json_path: "image" });
    map.insert("in_reply_to", ApiFieldMapping { resource_type: "repo", config_key: "in_reply_to", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/comments", method: "POST", json_path: "in_reply_to" });
    map.insert("include_all_branches", ApiFieldMapping { resource_type: "other", config_key: "include_all_branches", endpoint: "/repos/{template_owner}/{template_repo}/generate", method: "POST", json_path: "include_all_branches" });
    map.insert("include_claim_keys", ApiFieldMapping { resource_type: "repo", config_key: "include_claim_keys", endpoint: "/repos/{owner}/{repo}/actions/oidc/customization/sub", method: "PUT", json_path: "include_claim_keys" });
    map.insert("inputs", ApiFieldMapping { resource_type: "repo", config_key: "inputs", endpoint: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches", method: "POST", json_path: "inputs" });
    map.insert("insecure_ssl", ApiFieldMapping { resource_type: "repo", config_key: "insecure_ssl", endpoint: "/repos/{owner}/{repo}/hooks/{hook_id}/config", method: "PATCH", json_path: "insecure_ssl" });
    map.insert("integration_id", ApiFieldMapping { resource_type: "repo", config_key: "integration_id", endpoint: "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules", method: "POST", json_path: "integration_id" });
    map.insert("invitee_id", ApiFieldMapping { resource_type: "org", config_key: "invitee_id", endpoint: "/orgs/{org}/invitations", method: "POST", json_path: "invitee_id" });
    map.insert("is_alphanumeric", ApiFieldMapping { resource_type: "repo", config_key: "is_alphanumeric", endpoint: "/repos/{owner}/{repo}/autolinks", method: "POST", json_path: "is_alphanumeric" });
    map.insert("is_enabled", ApiFieldMapping { resource_type: "org", config_key: "is_enabled", endpoint: "/orgs/{org}/issue-types/{issue_type_id}", method: "PUT", json_path: "is_enabled" });
    map.insert("is_template", ApiFieldMapping { resource_type: "repo", config_key: "is_template", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "is_template" });
    map.insert("issue", ApiFieldMapping { resource_type: "repo", config_key: "issue", endpoint: "/repos/{owner}/{repo}/pulls", method: "POST", json_path: "issue" });
    map.insert("job", ApiFieldMapping { resource_type: "repo", config_key: "job", endpoint: "/repos/{owner}/{repo}/dependency-graph/snapshots", method: "POST", json_path: "job" });
    map.insert("key", ApiFieldMapping { resource_type: "user", config_key: "key", endpoint: "/user/ssh_signing_keys", method: "POST", json_path: "key" });
    map.insert("key_id", ApiFieldMapping { resource_type: "user", config_key: "key_id", endpoint: "/user/codespaces/secrets/{secret_name}", method: "PUT", json_path: "key_id" });
    map.insert("key_prefix", ApiFieldMapping { resource_type: "repo", config_key: "key_prefix", endpoint: "/repos/{owner}/{repo}/autolinks", method: "POST", json_path: "key_prefix" });
    map.insert("label", ApiFieldMapping { resource_type: "repo", config_key: "label", endpoint: "/repos/{owner}/{repo}/releases/assets/{asset_id}", method: "PATCH", json_path: "label" });
    map.insert("labels", ApiFieldMapping { resource_type: "repo", config_key: "labels", endpoint: "/repos/{owner}/{repo}/issues/{issue_number}", method: "PATCH", json_path: "labels" });
    map.insert("language", ApiFieldMapping { resource_type: "repo", config_key: "language", endpoint: "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses", method: "POST", json_path: "language" });
    map.insert("languages", ApiFieldMapping { resource_type: "repo", config_key: "languages", endpoint: "/repos/{owner}/{repo}/code-scanning/default-setup", method: "PATCH", json_path: "languages" });
    map.insert("last_read_at", ApiFieldMapping { resource_type: "repo", config_key: "last_read_at", endpoint: "/repos/{owner}/{repo}/notifications", method: "PUT", json_path: "last_read_at" });
    map.insert("license_template", ApiFieldMapping { resource_type: "repo_create_user", config_key: "license_template", endpoint: "/user/repos", method: "POST", json_path: "license_template" });
    map.insert("limit", ApiFieldMapping { resource_type: "user", config_key: "limit", endpoint: "/user/interaction-limits", method: "PUT", json_path: "limit" });
    map.insert("line", ApiFieldMapping { resource_type: "repo", config_key: "line", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/comments", method: "POST", json_path: "line" });
    map.insert("location", ApiFieldMapping { resource_type: "user", config_key: "location", endpoint: "/user", method: "PATCH", json_path: "location" });
    map.insert("lock_branch", ApiFieldMapping { resource_type: "repo", config_key: "lock_branch", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection", method: "PUT", json_path: "lock_branch" });
    map.insert("lock_reason", ApiFieldMapping { resource_type: "repo", config_key: "lock_reason", endpoint: "/repos/{owner}/{repo}/issues/{issue_number}/lock", method: "PUT", json_path: "lock_reason" });
    map.insert("lock_repositories", ApiFieldMapping { resource_type: "user", config_key: "lock_repositories", endpoint: "/user/migrations", method: "POST", json_path: "lock_repositories" });
    map.insert("log_url", ApiFieldMapping { resource_type: "repo", config_key: "log_url", endpoint: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses", method: "POST", json_path: "log_url" });
    map.insert("machine", ApiFieldMapping { resource_type: "user", config_key: "machine", endpoint: "/user/codespaces/{codespace_name}", method: "PATCH", json_path: "machine" });
    map.insert("maintainer_can_modify", ApiFieldMapping { resource_type: "repo", config_key: "maintainer_can_modify", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}", method: "PATCH", json_path: "maintainer_can_modify" });
    map.insert("maintainers", ApiFieldMapping { resource_type: "org", config_key: "maintainers", endpoint: "/orgs/{org}/teams", method: "POST", json_path: "maintainers" });
    map.insert("make_latest", ApiFieldMapping { resource_type: "repo", config_key: "make_latest", endpoint: "/repos/{owner}/{repo}/releases/{release_id}", method: "PATCH", json_path: "make_latest" });
    map.insert("managers", ApiFieldMapping { resource_type: "org", config_key: "managers", endpoint: "/orgs/{org}/campaigns/{campaign_number}", method: "PATCH", json_path: "managers" });
    map.insert("manifests", ApiFieldMapping { resource_type: "repo", config_key: "manifests", endpoint: "/repos/{owner}/{repo}/dependency-graph/snapshots", method: "POST", json_path: "manifests" });
    map.insert("maximum_runners", ApiFieldMapping { resource_type: "org", config_key: "maximum_runners", endpoint: "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}", method: "PATCH", json_path: "maximum_runners" });
    map.insert("members_allowed_repository_creation_type", ApiFieldMapping { resource_type: "org", config_key: "members_allowed_repository_creation_type", endpoint: "/orgs/{org}", method: "PATCH", json_path: "members_allowed_repository_creation_type" });
    map.insert("members_can_create_internal_repositories", ApiFieldMapping { resource_type: "org", config_key: "members_can_create_internal_repositories", endpoint: "/orgs/{org}", method: "PATCH", json_path: "members_can_create_internal_repositories" });
    map.insert("members_can_create_pages", ApiFieldMapping { resource_type: "org", config_key: "members_can_create_pages", endpoint: "/orgs/{org}", method: "PATCH", json_path: "members_can_create_pages" });
    map.insert("members_can_create_private_pages", ApiFieldMapping { resource_type: "org", config_key: "members_can_create_private_pages", endpoint: "/orgs/{org}", method: "PATCH", json_path: "members_can_create_private_pages" });
    map.insert("members_can_create_private_repositories", ApiFieldMapping { resource_type: "org", config_key: "members_can_create_private_repositories", endpoint: "/orgs/{org}", method: "PATCH", json_path: "members_can_create_private_repositories" });
    map.insert("members_can_create_public_pages", ApiFieldMapping { resource_type: "org", config_key: "members_can_create_public_pages", endpoint: "/orgs/{org}", method: "PATCH", json_path: "members_can_create_public_pages" });
    map.insert("members_can_create_public_repositories", ApiFieldMapping { resource_type: "org", config_key: "members_can_create_public_repositories", endpoint: "/orgs/{org}", method: "PATCH", json_path: "members_can_create_public_repositories" });
    map.insert("members_can_create_repositories", ApiFieldMapping { resource_type: "org", config_key: "members_can_create_repositories", endpoint: "/orgs/{org}", method: "PATCH", json_path: "members_can_create_repositories" });
    map.insert("members_can_fork_private_repositories", ApiFieldMapping { resource_type: "org", config_key: "members_can_fork_private_repositories", endpoint: "/orgs/{org}", method: "PATCH", json_path: "members_can_fork_private_repositories" });
    map.insert("merge_commit_message", ApiFieldMapping { resource_type: "repo", config_key: "merge_commit_message", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "merge_commit_message" });
    map.insert("merge_commit_title", ApiFieldMapping { resource_type: "repo", config_key: "merge_commit_title", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "merge_commit_title" });
    map.insert("merge_method", ApiFieldMapping { resource_type: "repo", config_key: "merge_method", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/merge", method: "PUT", json_path: "merge_method" });
    map.insert("message", ApiFieldMapping { resource_type: "repo", config_key: "message", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals", method: "PUT", json_path: "message" });
    map.insert("metadata", ApiFieldMapping { resource_type: "repo", config_key: "metadata", endpoint: "/repos/{owner}/{repo}/dependency-graph/snapshots", method: "POST", json_path: "metadata" });
    map.insert("milestone", ApiFieldMapping { resource_type: "repo", config_key: "milestone", endpoint: "/repos/{owner}/{repo}/issues/{issue_number}", method: "PATCH", json_path: "milestone" });
    map.insert("mode", ApiFieldMapping { resource_type: "other", config_key: "mode", endpoint: "/markdown", method: "POST", json_path: "mode" });
    map.insert("multi_repo_permissions_opt_out", ApiFieldMapping { resource_type: "repo", config_key: "multi_repo_permissions_opt_out", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces", method: "POST", json_path: "multi_repo_permissions_opt_out" });
    map.insert("name", ApiFieldMapping { resource_type: "repo", config_key: "name", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "name" });
    map.insert("names", ApiFieldMapping { resource_type: "repo", config_key: "names", endpoint: "/repos/{owner}/{repo}/topics", method: "PUT", json_path: "names" });
    map.insert("network_configuration_id", ApiFieldMapping { resource_type: "org", config_key: "network_configuration_id", endpoint: "/orgs/{org}/actions/runner-groups/{runner_group_id}", method: "PATCH", json_path: "network_configuration_id" });
    map.insert("network_settings_ids", ApiFieldMapping { resource_type: "org", config_key: "network_settings_ids", endpoint: "/orgs/{org}/settings/network-configurations/{network_configuration_id}", method: "PATCH", json_path: "network_settings_ids" });
    map.insert("new_name", ApiFieldMapping { resource_type: "repo", config_key: "new_name", endpoint: "/repos/{owner}/{repo}/labels/{name}", method: "PATCH", json_path: "new_name" });
    map.insert("new_owner", ApiFieldMapping { resource_type: "repo", config_key: "new_owner", endpoint: "/repos/{owner}/{repo}/transfer", method: "POST", json_path: "new_owner" });
    map.insert("note", ApiFieldMapping { resource_type: "project", config_key: "note", endpoint: "/projects/columns/cards/{card_id}", method: "PATCH", json_path: "note" });
    map.insert("notification_setting", ApiFieldMapping { resource_type: "team", config_key: "notification_setting", endpoint: "/teams/{team_id}", method: "PATCH", json_path: "notification_setting" });
    map.insert("object", ApiFieldMapping { resource_type: "repo", config_key: "object", endpoint: "/repos/{owner}/{repo}/git/tags", method: "POST", json_path: "object" });
    map.insert("oidc_token", ApiFieldMapping { resource_type: "repo", config_key: "oidc_token", endpoint: "/repos/{owner}/{repo}/pages/deployments", method: "POST", json_path: "oidc_token" });
    map.insert("org_metadata_only", ApiFieldMapping { resource_type: "user", config_key: "org_metadata_only", endpoint: "/user/migrations", method: "POST", json_path: "org_metadata_only" });
    map.insert("organization", ApiFieldMapping { resource_type: "repo", config_key: "organization", endpoint: "/repos/{owner}/{repo}/forks", method: "POST", json_path: "organization" });
    map.insert("organization_permission", ApiFieldMapping { resource_type: "project", config_key: "organization_permission", endpoint: "/projects/{project_id}", method: "PATCH", json_path: "organization_permission" });
    map.insert("output", ApiFieldMapping { resource_type: "repo", config_key: "output", endpoint: "/repos/{owner}/{repo}/check-runs/{check_run_id}", method: "PATCH", json_path: "output" });
    map.insert("owner", ApiFieldMapping { resource_type: "other", config_key: "owner", endpoint: "/repos/{template_owner}/{template_repo}/generate", method: "POST", json_path: "owner" });
    map.insert("pages_build_version", ApiFieldMapping { resource_type: "repo", config_key: "pages_build_version", endpoint: "/repos/{owner}/{repo}/pages/deployments", method: "POST", json_path: "pages_build_version" });
    map.insert("parent_team_id", ApiFieldMapping { resource_type: "team", config_key: "parent_team_id", endpoint: "/teams/{team_id}", method: "PATCH", json_path: "parent_team_id" });
    map.insert("parents", ApiFieldMapping { resource_type: "repo", config_key: "parents", endpoint: "/repos/{owner}/{repo}/git/commits", method: "POST", json_path: "parents" });
    map.insert("pat_ids", ApiFieldMapping { resource_type: "org", config_key: "pat_ids", endpoint: "/orgs/{org}/personal-access-tokens", method: "POST", json_path: "pat_ids" });
    map.insert("pat_request_ids", ApiFieldMapping { resource_type: "org", config_key: "pat_request_ids", endpoint: "/orgs/{org}/personal-access-token-requests", method: "POST", json_path: "pat_request_ids" });
    map.insert("path", ApiFieldMapping { resource_type: "repo", config_key: "path", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/comments", method: "POST", json_path: "path" });
    map.insert("pattern", ApiFieldMapping { resource_type: "repo", config_key: "pattern", endpoint: "/repos/{owner}/{repo}/tags/protection", method: "POST", json_path: "pattern" });
    map.insert("patterns_allowed", ApiFieldMapping { resource_type: "repo", config_key: "patterns_allowed", endpoint: "/repos/{owner}/{repo}/actions/permissions/selected-actions", method: "PUT", json_path: "patterns_allowed" });
    map.insert("payload", ApiFieldMapping { resource_type: "repo", config_key: "payload", endpoint: "/repos/{owner}/{repo}/deployments", method: "POST", json_path: "payload" });
    map.insert("permission", ApiFieldMapping { resource_type: "team", config_key: "permission", endpoint: "/teams/{team_id}/repos/{owner}/{repo}", method: "PUT", json_path: "permission" });
    map.insert("permissions", ApiFieldMapping { resource_type: "repo", config_key: "permissions", endpoint: "/repos/{owner}/{repo}/invitations/{invitation_id}", method: "PATCH", json_path: "permissions" });
    map.insert("placeholder_id", ApiFieldMapping { resource_type: "repo", config_key: "placeholder_id", endpoint: "/repos/{owner}/{repo}/secret-scanning/push-protection-bypasses", method: "POST", json_path: "placeholder_id" });
    map.insert("position", ApiFieldMapping { resource_type: "repo", config_key: "position", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/comments", method: "POST", json_path: "position" });
    map.insert("prerelease", ApiFieldMapping { resource_type: "repo", config_key: "prerelease", endpoint: "/repos/{owner}/{repo}/releases/{release_id}", method: "PATCH", json_path: "prerelease" });
    map.insert("prevent_self_review", ApiFieldMapping { resource_type: "repo", config_key: "prevent_self_review", endpoint: "/repos/{owner}/{repo}/environments/{environment_name}", method: "PUT", json_path: "prevent_self_review" });
    map.insert("previous_tag_name", ApiFieldMapping { resource_type: "repo", config_key: "previous_tag_name", endpoint: "/repos/{owner}/{repo}/releases/generate-notes", method: "POST", json_path: "previous_tag_name" });
    map.insert("privacy", ApiFieldMapping { resource_type: "team", config_key: "privacy", endpoint: "/teams/{team_id}", method: "PATCH", json_path: "privacy" });
    map.insert("private", ApiFieldMapping { resource_type: "repo", config_key: "private", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "private" });
    map.insert("private_vulnerability_reporting", ApiFieldMapping { resource_type: "org", config_key: "private_vulnerability_reporting", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "private_vulnerability_reporting" });
    map.insert("production_environment", ApiFieldMapping { resource_type: "repo", config_key: "production_environment", endpoint: "/repos/{owner}/{repo}/deployments", method: "POST", json_path: "production_environment" });
    map.insert("properties", ApiFieldMapping { resource_type: "repo", config_key: "properties", endpoint: "/repos/{owner}/{repo}/properties/values", method: "PATCH", json_path: "properties" });
    map.insert("public", ApiFieldMapping { resource_type: "gist", config_key: "public", endpoint: "/gists", method: "POST", json_path: "public" });
    map.insert("query_pack", ApiFieldMapping { resource_type: "repo", config_key: "query_pack", endpoint: "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses", method: "POST", json_path: "query_pack" });
    map.insert("query_suite", ApiFieldMapping { resource_type: "repo", config_key: "query_suite", endpoint: "/repos/{owner}/{repo}/code-scanning/default-setup", method: "PATCH", json_path: "query_suite" });
    map.insert("read", ApiFieldMapping { resource_type: "other", config_key: "read", endpoint: "/notifications", method: "PUT", json_path: "read" });
    map.insert("read_only", ApiFieldMapping { resource_type: "repo", config_key: "read_only", endpoint: "/repos/{owner}/{repo}/keys", method: "POST", json_path: "read_only" });
    map.insert("reason", ApiFieldMapping { resource_type: "repo", config_key: "reason", endpoint: "/repos/{owner}/{repo}/secret-scanning/push-protection-bypasses", method: "POST", json_path: "reason" });
    map.insert("recent_folders", ApiFieldMapping { resource_type: "user", config_key: "recent_folders", endpoint: "/user/codespaces/{codespace_name}", method: "PATCH", json_path: "recent_folders" });
    map.insert("ref", ApiFieldMapping { resource_type: "repo", config_key: "ref", endpoint: "/repos/{owner}/{repo}/git/refs", method: "POST", json_path: "ref" });
    map.insert("registry_type", ApiFieldMapping { resource_type: "org", config_key: "registry_type", endpoint: "/orgs/{org}/private-registries/{secret_name}", method: "PATCH", json_path: "registry_type" });
    map.insert("remove_events", ApiFieldMapping { resource_type: "repo", config_key: "remove_events", endpoint: "/repos/{owner}/{repo}/hooks/{hook_id}", method: "PATCH", json_path: "remove_events" });
    map.insert("replace_parent", ApiFieldMapping { resource_type: "repo", config_key: "replace_parent", endpoint: "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues", method: "POST", json_path: "replace_parent" });
    map.insert("repo_names", ApiFieldMapping { resource_type: "org", config_key: "repo_names", endpoint: "/orgs/{org}/teams", method: "POST", json_path: "repo_names" });
    map.insert("repositories", ApiFieldMapping { resource_type: "user", config_key: "repositories", endpoint: "/user/migrations", method: "POST", json_path: "repositories" });
    map.insert("repository_ids", ApiFieldMapping { resource_type: "other", config_key: "repository_ids", endpoint: "/applications/{client_id}/token/scoped", method: "POST", json_path: "repository_ids" });
    map.insert("repository_lists", ApiFieldMapping { resource_type: "repo", config_key: "repository_lists", endpoint: "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses", method: "POST", json_path: "repository_lists" });
    map.insert("repository_names", ApiFieldMapping { resource_type: "org", config_key: "repository_names", endpoint: "/orgs/{org}/properties/values", method: "PATCH", json_path: "repository_names" });
    map.insert("repository_owners", ApiFieldMapping { resource_type: "repo", config_key: "repository_owners", endpoint: "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses", method: "POST", json_path: "repository_owners" });
    map.insert("require_code_owner_reviews", ApiFieldMapping { resource_type: "repo", config_key: "require_code_owner_reviews", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", method: "PATCH", json_path: "require_code_owner_reviews" });
    map.insert("require_last_push_approval", ApiFieldMapping { resource_type: "repo", config_key: "require_last_push_approval", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", method: "PATCH", json_path: "require_last_push_approval" });
    map.insert("required", ApiFieldMapping { resource_type: "org", config_key: "required", endpoint: "/orgs/{org}/properties/schema/{custom_property_name}", method: "PUT", json_path: "required" });
    map.insert("required_approving_review_count", ApiFieldMapping { resource_type: "repo", config_key: "required_approving_review_count", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", method: "PATCH", json_path: "required_approving_review_count" });
    map.insert("required_contexts", ApiFieldMapping { resource_type: "repo", config_key: "required_contexts", endpoint: "/repos/{owner}/{repo}/deployments", method: "POST", json_path: "required_contexts" });
    map.insert("required_conversation_resolution", ApiFieldMapping { resource_type: "repo", config_key: "required_conversation_resolution", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection", method: "PUT", json_path: "required_conversation_resolution" });
    map.insert("required_linear_history", ApiFieldMapping { resource_type: "repo", config_key: "required_linear_history", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection", method: "PUT", json_path: "required_linear_history" });
    map.insert("required_pull_request_reviews", ApiFieldMapping { resource_type: "repo", config_key: "required_pull_request_reviews", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection", method: "PUT", json_path: "required_pull_request_reviews" });
    map.insert("required_status_checks", ApiFieldMapping { resource_type: "repo", config_key: "required_status_checks", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection", method: "PUT", json_path: "required_status_checks" });
    map.insert("resolution", ApiFieldMapping { resource_type: "repo", config_key: "resolution", endpoint: "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}", method: "PATCH", json_path: "resolution" });
    map.insert("resolution_comment", ApiFieldMapping { resource_type: "repo", config_key: "resolution_comment", endpoint: "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}", method: "PATCH", json_path: "resolution_comment" });
    map.insert("restricted_to_workflows", ApiFieldMapping { resource_type: "org", config_key: "restricted_to_workflows", endpoint: "/orgs/{org}/actions/runner-groups/{runner_group_id}", method: "PATCH", json_path: "restricted_to_workflows" });
    map.insert("restrictions", ApiFieldMapping { resource_type: "repo", config_key: "restrictions", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection", method: "PUT", json_path: "restrictions" });
    map.insert("retention_period_minutes", ApiFieldMapping { resource_type: "repo", config_key: "retention_period_minutes", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces", method: "POST", json_path: "retention_period_minutes" });
    map.insert("reviewers", ApiFieldMapping { resource_type: "repo", config_key: "reviewers", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", method: "POST", json_path: "reviewers" });
    map.insert("role", ApiFieldMapping { resource_type: "team", config_key: "role", endpoint: "/teams/{team_id}/memberships/{username}", method: "PUT", json_path: "role" });
    map.insert("rules", ApiFieldMapping { resource_type: "repo", config_key: "rules", endpoint: "/repos/{owner}/{repo}/rulesets/{ruleset_id}", method: "PUT", json_path: "rules" });
    map.insert("runner_group_id", ApiFieldMapping { resource_type: "repo", config_key: "runner_group_id", endpoint: "/repos/{owner}/{repo}/actions/runners/generate-jitconfig", method: "POST", json_path: "runner_group_id" });
    map.insert("runner_label", ApiFieldMapping { resource_type: "repo", config_key: "runner_label", endpoint: "/repos/{owner}/{repo}/code-scanning/default-setup", method: "PATCH", json_path: "runner_label" });
    map.insert("runner_type", ApiFieldMapping { resource_type: "repo", config_key: "runner_type", endpoint: "/repos/{owner}/{repo}/code-scanning/default-setup", method: "PATCH", json_path: "runner_type" });
    map.insert("runners", ApiFieldMapping { resource_type: "org", config_key: "runners", endpoint: "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners", method: "PUT", json_path: "runners" });
    map.insert("sarif", ApiFieldMapping { resource_type: "repo", config_key: "sarif", endpoint: "/repos/{owner}/{repo}/code-scanning/sarifs", method: "POST", json_path: "sarif" });
    map.insert("scanned", ApiFieldMapping { resource_type: "repo", config_key: "scanned", endpoint: "/repos/{owner}/{repo}/dependency-graph/snapshots", method: "POST", json_path: "scanned" });
    map.insert("scope", ApiFieldMapping { resource_type: "org", config_key: "scope", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}/attach", method: "POST", json_path: "scope" });
    map.insert("secret", ApiFieldMapping { resource_type: "repo", config_key: "secret", endpoint: "/repos/{owner}/{repo}/hooks/{hook_id}/config", method: "PATCH", json_path: "secret" });
    map.insert("secret_scanning", ApiFieldMapping { resource_type: "org", config_key: "secret_scanning", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "secret_scanning" });
    map.insert("secret_scanning_delegated_alert_dismissal", ApiFieldMapping { resource_type: "org", config_key: "secret_scanning_delegated_alert_dismissal", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "secret_scanning_delegated_alert_dismissal" });
    map.insert("secret_scanning_delegated_bypass", ApiFieldMapping { resource_type: "org", config_key: "secret_scanning_delegated_bypass", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "secret_scanning_delegated_bypass" });
    map.insert("secret_scanning_delegated_bypass_options", ApiFieldMapping { resource_type: "org", config_key: "secret_scanning_delegated_bypass_options", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "secret_scanning_delegated_bypass_options" });
    map.insert("secret_scanning_enabled_for_new_repositories", ApiFieldMapping { resource_type: "org", config_key: "secret_scanning_enabled_for_new_repositories", endpoint: "/orgs/{org}", method: "PATCH", json_path: "secret_scanning_enabled_for_new_repositories" });
    map.insert("secret_scanning_generic_secrets", ApiFieldMapping { resource_type: "org", config_key: "secret_scanning_generic_secrets", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "secret_scanning_generic_secrets" });
    map.insert("secret_scanning_non_provider_patterns", ApiFieldMapping { resource_type: "org", config_key: "secret_scanning_non_provider_patterns", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "secret_scanning_non_provider_patterns" });
    map.insert("secret_scanning_push_protection", ApiFieldMapping { resource_type: "org", config_key: "secret_scanning_push_protection", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "secret_scanning_push_protection" });
    map.insert("secret_scanning_push_protection_custom_link", ApiFieldMapping { resource_type: "org", config_key: "secret_scanning_push_protection_custom_link", endpoint: "/orgs/{org}", method: "PATCH", json_path: "secret_scanning_push_protection_custom_link" });
    map.insert("secret_scanning_push_protection_custom_link_enabled", ApiFieldMapping { resource_type: "org", config_key: "secret_scanning_push_protection_custom_link_enabled", endpoint: "/orgs/{org}", method: "PATCH", json_path: "secret_scanning_push_protection_custom_link_enabled" });
    map.insert("secret_scanning_push_protection_enabled_for_new_repositories", ApiFieldMapping { resource_type: "org", config_key: "secret_scanning_push_protection_enabled_for_new_repositories", endpoint: "/orgs/{org}", method: "PATCH", json_path: "secret_scanning_push_protection_enabled_for_new_repositories" });
    map.insert("secret_scanning_validity_checks", ApiFieldMapping { resource_type: "org", config_key: "secret_scanning_validity_checks", endpoint: "/orgs/{org}/code-security/configurations/{configuration_id}", method: "PATCH", json_path: "secret_scanning_validity_checks" });
    map.insert("security_and_analysis", ApiFieldMapping { resource_type: "repo", config_key: "security_and_analysis", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "security_and_analysis" });
    map.insert("selected_repository_ids", ApiFieldMapping { resource_type: "user", config_key: "selected_repository_ids", endpoint: "/user/codespaces/secrets/{secret_name}/repositories", method: "PUT", json_path: "selected_repository_ids" });
    map.insert("selected_teams", ApiFieldMapping { resource_type: "org", config_key: "selected_teams", endpoint: "/orgs/{org}/copilot/billing/selected_teams", method: "POST", json_path: "selected_teams" });
    map.insert("selected_usernames", ApiFieldMapping { resource_type: "org", config_key: "selected_usernames", endpoint: "/orgs/{org}/copilot/billing/selected_users", method: "POST", json_path: "selected_usernames" });
    map.insert("selected_workflows", ApiFieldMapping { resource_type: "org", config_key: "selected_workflows", endpoint: "/orgs/{org}/actions/runner-groups/{runner_group_id}", method: "PATCH", json_path: "selected_workflows" });
    map.insert("severity", ApiFieldMapping { resource_type: "repo", config_key: "severity", endpoint: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}", method: "PATCH", json_path: "severity" });
    map.insert("sha", ApiFieldMapping { resource_type: "repo", config_key: "sha", endpoint: "/repos/{owner}/{repo}/git/refs/{ref}", method: "PATCH", json_path: "sha" });
    map.insert("side", ApiFieldMapping { resource_type: "repo", config_key: "side", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/comments", method: "POST", json_path: "side" });
    map.insert("signature", ApiFieldMapping { resource_type: "repo", config_key: "signature", endpoint: "/repos/{owner}/{repo}/git/commits", method: "POST", json_path: "signature" });
    map.insert("size", ApiFieldMapping { resource_type: "org", config_key: "size", endpoint: "/orgs/{org}/actions/hosted-runners", method: "POST", json_path: "size" });
    map.insert("source", ApiFieldMapping { resource_type: "repo", config_key: "source", endpoint: "/repos/{owner}/{repo}/pages", method: "PUT", json_path: "source" });
    map.insert("squash_merge_commit_message", ApiFieldMapping { resource_type: "repo", config_key: "squash_merge_commit_message", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "squash_merge_commit_message" });
    map.insert("squash_merge_commit_title", ApiFieldMapping { resource_type: "repo", config_key: "squash_merge_commit_title", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "squash_merge_commit_title" });
    map.insert("start_line", ApiFieldMapping { resource_type: "repo", config_key: "start_line", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/comments", method: "POST", json_path: "start_line" });
    map.insert("start_private_fork", ApiFieldMapping { resource_type: "repo", config_key: "start_private_fork", endpoint: "/repos/{owner}/{repo}/security-advisories/reports", method: "POST", json_path: "start_private_fork" });
    map.insert("start_side", ApiFieldMapping { resource_type: "repo", config_key: "start_side", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/comments", method: "POST", json_path: "start_side" });
    map.insert("started_at", ApiFieldMapping { resource_type: "repo", config_key: "started_at", endpoint: "/repos/{owner}/{repo}/check-runs/{check_run_id}", method: "PATCH", json_path: "started_at" });
    map.insert("state", ApiFieldMapping { resource_type: "repo", config_key: "state", endpoint: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", method: "PATCH", json_path: "state" });
    map.insert("state_reason", ApiFieldMapping { resource_type: "repo", config_key: "state_reason", endpoint: "/repos/{owner}/{repo}/issues/{issue_number}", method: "PATCH", json_path: "state_reason" });
    map.insert("status", ApiFieldMapping { resource_type: "repo", config_key: "status", endpoint: "/repos/{owner}/{repo}/check-runs/{check_run_id}", method: "PATCH", json_path: "status" });
    map.insert("strict", ApiFieldMapping { resource_type: "repo", config_key: "strict", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", method: "PATCH", json_path: "strict" });
    map.insert("sub_issue_id", ApiFieldMapping { resource_type: "repo", config_key: "sub_issue_id", endpoint: "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority", method: "PATCH", json_path: "sub_issue_id" });
    map.insert("subject_type", ApiFieldMapping { resource_type: "repo", config_key: "subject_type", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/comments", method: "POST", json_path: "subject_type" });
    map.insert("subscribed", ApiFieldMapping { resource_type: "repo", config_key: "subscribed", endpoint: "/repos/{owner}/{repo}/subscription", method: "PUT", json_path: "subscribed" });
    map.insert("summary", ApiFieldMapping { resource_type: "repo", config_key: "summary", endpoint: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}", method: "PATCH", json_path: "summary" });
    map.insert("tag", ApiFieldMapping { resource_type: "repo", config_key: "tag", endpoint: "/repos/{owner}/{repo}/git/tags", method: "POST", json_path: "tag" });
    map.insert("tag_name", ApiFieldMapping { resource_type: "repo", config_key: "tag_name", endpoint: "/repos/{owner}/{repo}/releases/{release_id}", method: "PATCH", json_path: "tag_name" });
    map.insert("tagger", ApiFieldMapping { resource_type: "repo", config_key: "tagger", endpoint: "/repos/{owner}/{repo}/git/tags", method: "POST", json_path: "tagger" });
    map.insert("target", ApiFieldMapping { resource_type: "repo", config_key: "target", endpoint: "/repos/{owner}/{repo}/rulesets/{ruleset_id}", method: "PUT", json_path: "target" });
    map.insert("target_commitish", ApiFieldMapping { resource_type: "repo", config_key: "target_commitish", endpoint: "/repos/{owner}/{repo}/releases/{release_id}", method: "PATCH", json_path: "target_commitish" });
    map.insert("target_id", ApiFieldMapping { resource_type: "other", config_key: "target_id", endpoint: "/applications/{client_id}/token/scoped", method: "POST", json_path: "target_id" });
    map.insert("target_ref", ApiFieldMapping { resource_type: "repo", config_key: "target_ref", endpoint: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits", method: "POST", json_path: "target_ref" });
    map.insert("target_url", ApiFieldMapping { resource_type: "repo", config_key: "target_url", endpoint: "/repos/{owner}/{repo}/statuses/{sha}", method: "POST", json_path: "target_url" });
    map.insert("task", ApiFieldMapping { resource_type: "repo", config_key: "task", endpoint: "/repos/{owner}/{repo}/deployments", method: "POST", json_path: "task" });
    map.insert("team_id", ApiFieldMapping { resource_type: "repo_create_user", config_key: "team_id", endpoint: "/user/repos", method: "POST", json_path: "team_id" });
    map.insert("team_ids", ApiFieldMapping { resource_type: "repo", config_key: "team_ids", endpoint: "/repos/{owner}/{repo}/transfer", method: "POST", json_path: "team_ids" });
    map.insert("team_managers", ApiFieldMapping { resource_type: "org", config_key: "team_managers", endpoint: "/orgs/{org}/campaigns/{campaign_number}", method: "PATCH", json_path: "team_managers" });
    map.insert("team_reviewers", ApiFieldMapping { resource_type: "repo", config_key: "team_reviewers", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", method: "POST", json_path: "team_reviewers" });
    map.insert("text", ApiFieldMapping { resource_type: "other", config_key: "text", endpoint: "/markdown", method: "POST", json_path: "text" });
    map.insert("tfvc_project", ApiFieldMapping { resource_type: "repo", config_key: "tfvc_project", endpoint: "/repos/{owner}/{repo}/import", method: "PATCH", json_path: "tfvc_project" });
    map.insert("title", ApiFieldMapping { resource_type: "repo", config_key: "title", endpoint: "/repos/{owner}/{repo}/issues/{issue_number}", method: "PATCH", json_path: "title" });
    map.insert("tool_name", ApiFieldMapping { resource_type: "repo", config_key: "tool_name", endpoint: "/repos/{owner}/{repo}/code-scanning/sarifs", method: "POST", json_path: "tool_name" });
    map.insert("transient_environment", ApiFieldMapping { resource_type: "repo", config_key: "transient_environment", endpoint: "/repos/{owner}/{repo}/deployments", method: "POST", json_path: "transient_environment" });
    map.insert("tree", ApiFieldMapping { resource_type: "repo", config_key: "tree", endpoint: "/repos/{owner}/{repo}/git/trees", method: "POST", json_path: "tree" });
    map.insert("twitter_username", ApiFieldMapping { resource_type: "user", config_key: "twitter_username", endpoint: "/user", method: "PATCH", json_path: "twitter_username" });
    map.insert("type", ApiFieldMapping { resource_type: "repo", config_key: "type", endpoint: "/repos/{owner}/{repo}/issues/{issue_number}", method: "PATCH", json_path: "type" });
    map.insert("url", ApiFieldMapping { resource_type: "repo", config_key: "url", endpoint: "/repos/{owner}/{repo}/hooks/{hook_id}/config", method: "PATCH", json_path: "url" });
    map.insert("url_template", ApiFieldMapping { resource_type: "repo", config_key: "url_template", endpoint: "/repos/{owner}/{repo}/autolinks", method: "POST", json_path: "url_template" });
    map.insert("use_default", ApiFieldMapping { resource_type: "repo", config_key: "use_default", endpoint: "/repos/{owner}/{repo}/actions/oidc/customization/sub", method: "PUT", json_path: "use_default" });
    map.insert("use_lfs", ApiFieldMapping { resource_type: "repo", config_key: "use_lfs", endpoint: "/repos/{owner}/{repo}/import/lfs", method: "PATCH", json_path: "use_lfs" });
    map.insert("use_squash_pr_title_as_default", ApiFieldMapping { resource_type: "repo", config_key: "use_squash_pr_title_as_default", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "use_squash_pr_title_as_default" });
    map.insert("username", ApiFieldMapping { resource_type: "org", config_key: "username", endpoint: "/orgs/{org}/private-registries/{secret_name}", method: "PATCH", json_path: "username" });
    map.insert("users", ApiFieldMapping { resource_type: "repo", config_key: "users", endpoint: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", method: "PUT", json_path: "users" });
    map.insert("validate", ApiFieldMapping { resource_type: "repo", config_key: "validate", endpoint: "/repos/{owner}/{repo}/code-scanning/sarifs", method: "POST", json_path: "validate" });
    map.insert("value", ApiFieldMapping { resource_type: "repo", config_key: "value", endpoint: "/repos/{owner}/{repo}/actions/variables/{name}", method: "PATCH", json_path: "value" });
    map.insert("value_type", ApiFieldMapping { resource_type: "org", config_key: "value_type", endpoint: "/orgs/{org}/properties/schema/{custom_property_name}", method: "PUT", json_path: "value_type" });
    map.insert("values_editable_by", ApiFieldMapping { resource_type: "org", config_key: "values_editable_by", endpoint: "/orgs/{org}/properties/schema/{custom_property_name}", method: "PUT", json_path: "values_editable_by" });
    map.insert("vcs", ApiFieldMapping { resource_type: "repo", config_key: "vcs", endpoint: "/repos/{owner}/{repo}/import", method: "PATCH", json_path: "vcs" });
    map.insert("vcs_password", ApiFieldMapping { resource_type: "repo", config_key: "vcs_password", endpoint: "/repos/{owner}/{repo}/import", method: "PATCH", json_path: "vcs_password" });
    map.insert("vcs_url", ApiFieldMapping { resource_type: "repo", config_key: "vcs_url", endpoint: "/repos/{owner}/{repo}/import", method: "PUT", json_path: "vcs_url" });
    map.insert("vcs_username", ApiFieldMapping { resource_type: "repo", config_key: "vcs_username", endpoint: "/repos/{owner}/{repo}/import", method: "PATCH", json_path: "vcs_username" });
    map.insert("verified_allowed", ApiFieldMapping { resource_type: "repo", config_key: "verified_allowed", endpoint: "/repos/{owner}/{repo}/actions/permissions/selected-actions", method: "PUT", json_path: "verified_allowed" });
    map.insert("version", ApiFieldMapping { resource_type: "repo", config_key: "version", endpoint: "/repos/{owner}/{repo}/dependency-graph/snapshots", method: "POST", json_path: "version" });
    map.insert("visibility", ApiFieldMapping { resource_type: "repo", config_key: "visibility", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "visibility" });
    map.insert("vulnerabilities", ApiFieldMapping { resource_type: "repo", config_key: "vulnerabilities", endpoint: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}", method: "PATCH", json_path: "vulnerabilities" });
    map.insert("wait_timer", ApiFieldMapping { resource_type: "repo", config_key: "wait_timer", endpoint: "/repos/{owner}/{repo}/environments/{environment_name}", method: "PUT", json_path: "wait_timer" });
    map.insert("web_commit_signoff_required", ApiFieldMapping { resource_type: "repo", config_key: "web_commit_signoff_required", endpoint: "/repos/{owner}/{repo}", method: "PATCH", json_path: "web_commit_signoff_required" });
    map.insert("work_folder", ApiFieldMapping { resource_type: "repo", config_key: "work_folder", endpoint: "/repos/{owner}/{repo}/actions/runners/generate-jitconfig", method: "POST", json_path: "work_folder" });
    map.insert("working_directory", ApiFieldMapping { resource_type: "repo", config_key: "working_directory", endpoint: "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces", method: "POST", json_path: "working_directory" });
    map
}
